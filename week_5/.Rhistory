b<-3
c<-4
d<-5
mul<- a*b*c*d
mul
library("UsingR", lib.loc="/usr/local/lib/R/3.5/site-library")
library(UsingR)
exec.pay
max(exec.pay)
mean(exec.pay)
min(exec.pay)
max(exec.pay)
meann<- mean(exec.pay)
meann
meantrim<- mean(exec.pay, trim = 0.10)
meantrim
meanDiff<- meann - meantrim
meanDiff
Orange
mean(Orange$age)
max(Orange$circumference)
x<- c(1,3,5,7,9)
y<- c(2,3,5,7,11,13)
x+1
y*2
length(x)
length(y)
x+y
sum(x>5)
sum[x[x>5]]
sum(x[x>5])
sum(x>5|x<3)
y[3]
y[-3]
y[x]
y[y>=7]
save.image("Lab1.RData")
load("Lab1.RDATA")
install.packages("data.table")
install.packages("ff")
install.packages("sqldf")
load("~/Documents/RStudioNJIT/mydata.RData")
install.packages("jsonlite")
install.packages("XML")
install.packages("RCurl")
install.packages("XLConnect")
install.packages("rJava")
install.packages("XLConnectJars")
install.packages("xlsx")
install.packages("rJava")
install.packages("rJava")
install.packages("XLConnect")
install.packages("xlsx")
install.packages("gdata")
install.packages("RSQLite")
install.packages("RODBC")
install.packages("RODBC")
getwd()
stock<- read.csv("/Users/ankitchaudhary/Documents/IS_Sem1/Data_Mining/Attachments_2nd Week/data_akbilgic.csv", header = T, sep = ",")
View(stock)
meanISE<- mean(stock$ISE)
meanISE
medianISE<- median(stock$SP)
str(stock)
summary(stock)
dim(stock)
medianISE
<- mode(stock$ISE)
modeISE
modeISE<- mode(stock$ISE)
modeISE
medianISE<- median(stock$ISE)
medianISE
modeISE<- mode(stock$ISE)
modeISE
meanISE<- mean(stock$ISE, na.rm = F)
meanISE
medianISE<- median(stock$ISE, na.rm = F)
medianISE
modeISE<- mode(stock$ISE, na.rm=F)
modeISE<- mode(stock$ISE)
modeISE<- mode(stock$ISE)
modeISE
sdISE<- sd(stock$ISE)
sdISE
sdISE<- sd(stock$ISE, na.rm = F)
sdISE
Mode<- function(num) {
unique.num<- unique(num)
unique.num(which.max(tabulate(match(num,unique.num))))
}
Mode(stock$ISE)
Mode<- function(num) {
unique.num<- unique(num)
unique.num[which.max(tabulate(match(num,unique.num)))]
}
ode(stock$ISE)
Mode(stock$ISE)
sdISE<- sd(stock$ISE, na.rm = F)
sdISE
??variance
>>mode
??mode
varianceISE<- var(stock$ISE)
varianceISE
boxplot(stock$ISE, horizontal = T)
identify(rep(1, length(y)), y, labels = seq_along(y))
boxplot(stock$ISE, horizontal = T)
identify(rep(1, length(stock$ISE)), stockISE, labels = seq_along(stockISE))
boxplot(stock$ISE, horizontal = T)
Mode(stock$ISE)
identify(rep(1, length(y)), y, labels = seq_along(y))
medianIS
varianceISE<- var(stock$ISE)
varianceISE
str(UsingR)
library(UsingR)
str(primes)
p<- primes
exit
q()
install.packages("gapminder")
install.packages(c("digest", "evaluate", "tidyselect"))
library("gapminder", lib.loc="/usr/local/lib/R/3.5/site-library")
library(gapminder)
library(dplyr)
library(gapminder)
q()
library("gapminder", lib.loc="/usr/local/lib/R/3.5/site-library")
install.packages("readxl")
install.packages("readxl")
install.packages("XLConnect")
install.packages(c("dplyr", "MASS", "rgdal"))
install.packages("MASS", lib="/usr/local/Cellar/r/3.5.1/lib/R/library")
x<- list(a=1:5, rnorm(10))
x
class(x)
lapply(x, mean)
class(lapply(x, mean))
class(sapply(x, mean))
#1.1
sum(1+2*(3+4))
sum(4^3 + 3^(2+1))
sqrt((4+3)*(2+1))
((1+2)/(3+4))^2
#1.2
((2+3)-4)
((2+(3*4)))
(2/3/4)
2^3^4
#1.3
(1+(2*3^4))/((5/6)-7)
#1.4
(0.25-0.2)/(sqrt(0.2*((1-0.2)/100)))
a<-2
b<-3
c<-4
d<-5
mul<- a*b*c*d
mul
rivers  #1770
library(UsingR)
exec.pay
max(exec.pay)
mean(exec.pay)  #59.88
min(exec.pay)
max(exec.pay)
meann<- mean(exec.pay)
meann
meantrim<- mean(exec.pay, trim = 0.10)
meantrim
meanDiff<- meann - meantrim
meanDiff
Orange
mean(Orange$age)
max(Orange$circumference)
x<- c(1,3,5,7,9)
y<- c(2,3,5,7,11,13)
x+1
y*2
length(x)
length(y)
x+y
sum(x>5)
sum(x[x>5])
sum(x>5|x<3)
y[3]
y[-3]
y[x]
y[y>=7]
save.image("Lab1.RData")
load("Lab1.RDATA")
#Lab2
#1
train<-read.csv("train.csv")
#Lab2
#1
train<-read.csv("train.csv")
x<-read.csv("train.csv")
x<-read.csv("train.csv")
setwd("/Users/ankitchaudhary/Documents/IS_Sem1/DataAnalytics_with_R/week_3/")
x<-read.csv("train.csv")
setwd("/Users/ankitchaudhary/Documents/IS_Sem1/DataAnalytics_with_R/week_3/")
setwd("/Users/ankitchaudhary/Documents/IS_Sem1/DataAnalytics_with_R/week_2/")
#1
train<-read.csv("train.csv")
nrow(train)
x<-read.csv("train.csv")
distinct_relevance<-function(vect = X$relevance) {
dist_vect <- vect[1]
count = 1
for (i in vect) {
if (i %in% dist_vect == TRUE) {
next
} else {
dist_vect[count+1] <- i
count <- count + 1
}
}
count
}
countX=function(vect,value){
counter=0
for(i in seq_len(length(vect))){
if(vect[i]==value){
counter=counter+1
}
}
counter
}
#4
table(x)
getPi=function(N){
if(N<29){
pi=0
pie=trunc(3.14159265358979323846264338327*10^N)/10^N
i=0
flg=TRUE
while(flg){
pi=pi+(((-1)^i)/((2*i)+1))
i=i+1
if((trunc((4*pi)*10^N)/10^N)==pie){
flg=FALSE
}
}
print(i)
}else{
print("Enter Value less than 6")
}
}
getPi(3)
len<- distinct_relevance(x$relevance)
len
countX=function(vect,value){
counter=0
for(i in seq_len(length(vect))){
if(vect[i]==value){
counter=counter+1
}
}
counter
}
countX(x$relevance, 3.00)
#Output
#992931
ncol(train)
View(train)
#1
train<-read.csv("train.csv")
nrow(train)
#Output
#992931
ncol(train)
#Show the right down corner element of each file in R (namely, last row, last column).
train[nrow(train),ncol(train)]
#2 Output the odd numbers of columns and even numbers of rows of train.csv
train[seq(0,nrow(train),by=2),seq(1,ncol(train),by=2)]
#3. Save into R objects and load them, using dput, dget, dump, source, save, load, save.image
listArr=data.frame(Numbers=1:26,Alphabets=LETTERS)
dput(listArr,file="listArr.R")
dget("listArr.R")
listArr1=data.frame(Numbers=1:26,Alphabets=LETTERS)
listArr2="Empty List"
dump(c("listArr1","listArr2"),file="dumpList.R")
#to remove variables from the memory
rm(listArr1,listArr2)
source("dumpList.R")
save(listArr1, listArr2, file = "saveLists.rda")
load("saveLists.rda")
save.image(file = "saveLists.RData")
load("saveLists.RData")
library(dplyr)
msleep <- read.csv("https://web.njit.edu/~zhiwei/CS636/msleep_ggplot2.csv")
str(msleep)
head(sleepData)
head(select(msleep, -name))
head(select(msleep, name:order))
head(select(msleep, starts_with("sl")))
filter(mtcars, cyl == 8)
filter(mtcars, cyl < 6)
# Multiple criteria
filter(mtcars, cyl < 6 & vs == 1)
filter(mtcars, cyl < 6 | vs == 1)
# Multiple arguments are equivalent to and
filter(mtcars, cyl < 6, vs == 1)
arrange(mtcars, cyl, disp)
arrange(mtcars, desc(disp))
rename(mtcars, wt=Weight)
rename(mtcars, Weight=wt)
#mutate
head(mutate(msleep, sleep_total_min = sleep_total * 60))
head(transmute(msleep, sleep_total_min = sleep_total * 60))
#mutate
head(mutate(msleep, sleep_total_min = sleep_total * 60))
by_cyl <- group_by(mtcars, cyl)
summarise(by_cyl, mean(disp), mean(hp))
by_vore <- group_by(msleep, vore)
summarise(by_vore, total=mean(sleep_total), avg_sleep_rem=mean(sleep_rem, na.rm=T))
#group_by
by_cyl <- group_by(mtcars, cyl)
by_cyl
summarise(by_cyl, mean(disp), mean(hp))
by_vore <- group_by(msleep, vore)
by_vore
#pipe %>%
names(msleep)
msleep %>% select(name, order, sleep_total) %>% arrange(order, sleep_total) %>% head
msleep %>% select(name, order, sleep_total) %>% arrange(order, sleep_total) %>% filter(sleep_total >= 16)
msleep %>% group_by(order) %>% summarise(avg_sleep = mean(sleep_total), min_sleep = min(sleep_total), max_sleep = max(sleep_total), total = n())
search()
#reshape2
library(reshape2)
?reshape2
?reshape2()
??reshape2
names(airquality) <- tolower(names(airquality))
head(airquality)
aql <- melt(airquality)
head(aql)
aql %>% tail
dim(aql)
dim(aqk)
dim(airquality)
aql <- melt(airquality, id.vars = c("month", "day"))
head(aql)
subset(airquality, month==5 & day==1)
head(airquality)
subset(airquality, month==5 & day==1)
subset(aql, month==5 & day==1)
aql <- melt(airquality, id.vars = c("month", "day"))
head(aql)
aql <- melt(airquality, id.vars = c("month", "day"),
variable.name = "climate_variable",
value.name = "climate_value")
head(aql)
head(airquality)
aql2 <- melt(airquality, id.vars = c("month", "day", "ozone"))
head(aql2)
names(aql)
names(airquality)
airquality %>% head
aql2 <- melt(airquality[1,], id.vars = c("month", "day", "ozone"))
aql2
names(airquality)
aql3 <- melt(airquality[1,], id.vars = c("month", "day", "ozone"))
aql3
#cast
aql <- melt(airquality, id.vars = c("month", "day"))
aqw <- dcast(aql, month + day ~ variable)
head(aqw)
head(airquality)
dcast(aql, month ~ variable)
dcast(aql, month ~ variable, fun.aggregate = mean, na.rm = TRUE)
y[x]
x<- c(1,3,5,7,9)
y<- c(2,3,5,7,11,13)
y[x]
#1
train<-read.csv("train.csv")
nrow(train)
#Show the right down corner element of each file in R (namely, last row, last column).
train[nrow(train),ncol(train)]
#Show the right down corner element of each file in R (namely, last row, last column).
train[nrow(train),ncol(train)]
#2 Output the odd numbers of columns and even numbers of rows of train.csv
train[seq(0,nrow(train),by=2),seq(1,ncol(train),by=2)]
#3. Save into R objects and load them, using dput, dget, dump, source, save, load, save.image
listArr=data.frame(Numbers=1:26,Alphabets=LETTERS)
listArr %>% head
dput(listArr,file="listArr.R")
dget("listArr.R")
listArr1=data.frame(Numbers=1:26,Alphabets=LETTERS)
dget("listArr.R")
class(dget("listArr.R"))
listArr1=data.frame(Numbers=1:26,Alphabets=LETTERS)
listArr2="Empty List"
dump(c("listArr1","listArr2"),file="dumpList.R")
d<-dump(c("listArr1","listArr2"),file="dumpList.R")
d
save(listArr1, listArr2, file = "saveLists.rda")
load("saveLists.rda")
save.image(file = "saveLists.RData")
load("saveLists.RData")
homicides <- readLines("homicides.txt")
setwd("/Users/ankitchaudhary/Documents/IS_Sem1/DataAnalytics_with_R/week_2/")
setwd("/Users/ankitchaudhary/Documents/IS_Sem1/DataAnalytics_with_R/week_5/")
homicides <- readLines("homicides.txt")
homicides <- readLines("homicides.txt")
homicides <- readLines("homicides.txt")
homicides <- readLines("homicides.txt")
library(RCurl)
library(XML)
?htmlParse
input <- "http://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1005817"
?getURL
setwd("/Users/ankitchaudhary/Documents/IS_Sem1/DataAnalytics_with_R/week_5/")
homicides <- readLines("homicides.txt")
homicides <- readLines("homicides.txt")
homicides %>% head
possible_causes = c('asphyxiation', 'Asphyxiation', 'blunt force', 'Blunt force', 'other', 'Other', 'shooting',
'Shooting', 'stabbing', 'Stabbing', 'unknown','Unknown')
cause_count<-function(cause= NULL) {
possible_causes = c('asphyxiation', 'Asphyxiation', 'blunt force', 'Blunt force', 'other', 'Other', 'shooting',
'Shooting', 'stabbing', 'Stabbing', 'unknown','Unknown')
if (is.null(cause) == TRUE) {
stop('Please provide a cause')
}
if ((cause %in% possible_causes) == FALSE) {
stop('Invalid cause')
}
a = substr(cause, 1,1)
upper_a = capitalize(a)
lower_a = tolower(a)
rest = substr(cause,2,nchar(cause))
cause_new = paste('[',upper_a,lower_a,']',rest, sep = '')
con <- paste("<dd>[Cc]ause:",cause_new)
val = length(grep(con, homicides))
return (val)
}
cause_count("Asphyxiation")
age_count<-function(age= NULL) {
if (is.null(age) == TRUE) {
stop('Please provide an age for count')
}
age_con <- paste("Age:",age, "years old")
val = length(grep(age_con, homicides))
return(val)
num <- age_count(val)
}
age_count(0)
?substr
a
a
a[]
homicides <- readLines("homicides.txt")
age_count<- function(age=NULL){
if(is.null(age)==TRUE){
stop("provide age for age count")
}
age_con<- paste('Age:',age, "years  old")
val<- length(grep(age_con,homicides))
return(val)
num<- age_count(val)
}
age_count(1)
age_count(0)
age_count('99')
age_count(0)
num<- age_count(val)
age_count<- function(age=NULL){
if(is.null(age)==TRUE){
stop("provide age for age count")
}
age_con<- paste('Age:',age, "years  old")
val<- length(grep(age_con,homicides))
return(val)
}
age_count(0)
num<- age_count(val)
num<- age_count(21)
num
age_count<- function(age=NULL){
if(is.null(age)==TRUE){
stop("provide age for age count")
}
age_con<- paste('Age:',age, "years  old")
#val<- length(grep(age_con,homicides))
return(length(grep(age_con,homicides)))
}
age_count(0)
num<- age_count(21)
num
cause_count<-function(cause= NULL) {
possible_causes = c('asphyxiation', 'Asphyxiation', 'blunt force', 'Blunt force', 'other', 'Other', 'shooting',
'Shooting', 'stabbing', 'Stabbing', 'unknown','Unknown')
if (is.null(cause) == TRUE) {
stop('Please provide a cause')
}
if ((cause %in% possible_causes) == FALSE) {
stop('Invalid cause')
}
a = substr(cause, 1,1)
upper_a = capitalize(a)
lower_a = tolower(a)
rest = substr(cause,2,nchar(cause))
cause_new = paste('[',upper_a,lower_a,']',rest, sep = '')
con <- paste("<dd>[Cc]ause:",cause_new)
val = length(grep(con, homicides))
return (val)
}
cause_count("Asphyxiation")
cause_count("shooting")
